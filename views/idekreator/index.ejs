<%- contentFor('body') %>
<div class="flex h-screen bg-gray-100">
    <!-- Sidebar -->
    <div class="hidden md:flex md:flex-shrink-0">
        <div class="flex flex-col w-80">
            <div class="flex flex-col h-0 flex-1 border-r border-gray-200 bg-white">
                <!-- New Idea Button -->
                <div class="flex-shrink-0 px-4 py-4 border-b border-gray-200">
                    <button onclick="startNewConversation()" 
                            class="flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Ide Baru
                    </button>
                </div>

                <!-- Ideas List -->
                <div class="flex-1 overflow-y-auto">
                    <div id="conversations-list" class="divide-y divide-gray-200">
                        <!-- Conversations will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="flex-1 flex flex-col bg-white">
        <!-- Chat Header -->
        <div class="flex-shrink-0 h-16 bg-white border-b border-gray-200 flex items-center justify-between px-6">
            <div class="flex items-center">
                <button class="md:hidden mr-4 text-gray-500 hover:text-gray-600" onclick="toggleSidebar()">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                    </svg>
                </button>
                <h1 class="text-lg font-medium text-gray-900">Ide Kreator</h1>
            </div>
            <div id="conversation-actions" class="hidden">
                <button onclick="deleteCurrentConversation()" class="text-gray-400 hover:text-red-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Messages Area -->
        <div class="flex-1 overflow-y-auto p-6" id="chat-messages">
            <div class="max-w-3xl mx-auto">
                <div class="text-center text-gray-500 my-8" id="welcome-message">
                    <h2 class="text-2xl font-bold mb-4">Anda Dapat Menemukan Ratusan Ide Konten Disini!</h2>
                    <p class="mb-4">Mulai percakapan baru dengan click button + Ide Baru.</p>
                </div>
            </div>
        </div>

        <!-- Input Area -->
        <div class="flex-shrink-0 bg-white border-t border-gray-200 p-4">
            <div class="max-w-3xl mx-auto">
                <form onsubmit="sendMessage(event)" class="flex space-x-4">
                    <input type="text" 
                           id="message-input"
                           placeholder="Masukkan ide konten yang ingin dibuat..."
                           class="flex-1 rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                           disabled>
                    <button type="submit" 
                            id="send-button"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                            disabled>
                        Kirim
                    </button>
                </form>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="hidden fixed bottom-20 left-1/2 transform -translate-x-1/2">
            <div class="bg-white rounded-full shadow-lg px-4 py-2">
                <div class="flex items-center space-x-2">
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
let currentConversationId = null;
let isProcessing = false;

// Elements
const messagesDiv = document.getElementById('chat-messages');
const messageInput = document.getElementById('message-input');
const sendButton = document.getElementById('send-button');
const loadingIndicator = document.getElementById('loading-indicator');
const welcomeMessage = document.getElementById('welcome-message');
const conversationActions = document.getElementById('conversation-actions');

function enableChat() {
    messageInput.disabled = false;
    sendButton.disabled = false;
    welcomeMessage.classList.add('hidden');
    conversationActions.classList.remove('hidden');
}

function disableChat() {
    messageInput.disabled = true;
    sendButton.disabled = true;
    welcomeMessage.classList.remove('hidden');
    conversationActions.classList.add('hidden');
}

function showLoading() {
    loadingIndicator.classList.remove('hidden');
    isProcessing = true;
}

function hideLoading() {
    loadingIndicator.classList.add('hidden');
    isProcessing = false;
}

async function startNewConversation() {
    try {
        showLoading();
        const response = await fetch('/idekreator/conversation/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                summary: 'Ide Konten' + new Date().toLocaleString() 
            })
        });
        
        const data = await response.json();
        if (data.statusCode === 200) {
            currentConversationId = data.result.conversationId;
            clearMessages();
            enableChat();
            await loadConversations();
        }
    } catch (error) {
        console.error('Error starting conversation:', error);
        showError('Gagal memulai percakapan baru');
    } finally {
        hideLoading();
    }
}

async function sendMessage(event) {
    event.preventDefault();
    if (isProcessing) return;
    
    const message = messageInput.value.trim();
    if (!message) return;
    
    try {
        showLoading();
        messageInput.value = '';

        // Add user message immediately
        addMessageToChat('user', message);

        // Send message
        const response = await fetch(`/idekreator/message/${currentConversationId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message })
        });
        
        const data = await response.json();
        if (!data.result) throw new Error('Invalid response');

        // Poll for streaming response
        let attempts = 0;
        const maxAttempts = 30;
        const pollInterval = 1000;

        const pollResponse = async () => {
            try {
                const streamResponse = await fetch(`/idekreator/stream/${data.result}`);
                const streamData = await streamResponse.json();
                
                if (streamData.result?.completed && streamData.result?.result?.['Generated Result']) {
                    addMessageToChat('ai', streamData.result.result['Generated Result']);
                    hideLoading();
                } else if (attempts < maxAttempts) {
                    attempts++;
                    setTimeout(pollResponse, pollInterval);
                } else {
                    throw new Error('Response timeout');
                }
            } catch (error) {
                console.error('Streaming error:', error);
                hideLoading();
                showError('Gagal mendapatkan respons');
            }
        };

        pollResponse();

    } catch (error) {
        console.error('Error sending message:', error);
        showError('Gagal mengirim pesan');
        hideLoading();
    }
}

function addMessageToChat(type, content) {
    const messageContainer = document.createElement('div');
    messageContainer.className = `flex ${type === 'user' ? 'justify-end' : 'justify-start'} mb-4`;
    
    const messageContent = document.createElement('div');
    messageContent.className = `max-w-[90%] rounded-lg p-4 ${
        type === 'user' 
            ? 'bg-blue-600 text-white' 
            : 'bg-gray-100 text-gray-900'
    }`;

    // For AI responses, add a copy button for the entire message if it's not a code block
    if (type === 'ai' && !content.includes('```')) {
        const uniqueId = 'msg-' + Math.random().toString(36).substr(2, 9);
        messageContent.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <div class="flex-grow" id="${uniqueId}">${formatContent(content)}</div>
                <button onclick="copyToClipboard('${uniqueId}')" 
                        class="ml-2 text-xs bg-gray-200 text-gray-600 px-2 py-1 rounded hover:bg-gray-300 focus:outline-none">
                    Copy
                </button>
            </div>`;
    } else {
        messageContent.innerHTML = formatContent(content);
    }
    
    messageContainer.appendChild(messageContent);
    messagesDiv.appendChild(messageContainer);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function formatContent(content) {
    // Format bold text and line breaks first
    let formattedContent = content
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\n/g, '<br>');
    
    // Split and process code blocks
    const parts = formattedContent.split('```');
    formattedContent = parts.map((part, index) => {
        if (index % 2 === 1) { // Code block
            const uniqueId = 'code-' + Math.random().toString(36).substr(2, 9);
            return `
                <div class="code-block-wrapper relative">
                    <div class="bg-gray-800 rounded-t-lg px-4 py-2 flex justify-between items-center">
                        <span class="text-gray-400 text-sm">Response</span>
                        <button onclick="copyToClipboard('${uniqueId}')" 
                                class="text-xs bg-gray-700 text-white px-3 py-1 rounded hover:bg-gray-600 focus:outline-none">
                            Copy
                        </button>
                    </div>
                    <pre id="${uniqueId}" class="bg-gray-800 text-white p-4 rounded-b-lg overflow-x-auto m-0"><code>${escapeHtml(part)}</code></pre>
                </div>`;
        }
        return part;
    }).join('');

    return formattedContent;
}

function copyToClipboard(elementId) {
    const pre = document.getElementById(elementId);
    const text = pre.textContent;
    
    navigator.clipboard.writeText(text).then(() => {
        // Find the button that triggered this
        const button = pre.parentElement.querySelector('button');
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        
        // Reset button text after 2 seconds
        setTimeout(() => {
            button.textContent = originalText;
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy:', err);
        showError('Failed to copy to clipboard');
    });
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

async function loadConversations() {
    try {
        const response = await fetch('/idekreator/conversations');
        const data = await response.json();
        
        const conversationsList = document.getElementById('conversations-list');
        conversationsList.innerHTML = '';
        
        data.result.forEach(conv => {
            const div = document.createElement('div');
            div.className = `p-4 hover:bg-gray-50 cursor-pointer ${
                currentConversationId === conv.ConversationId ? 'bg-blue-50' : ''
            }`;
            div.setAttribute('data-conversation-id', conv.ConversationId);
            div.onclick = () => loadConversation(conv.ConversationId);
            
            const date = new Date(conv.CreatedAt * 1000);
            const formattedDate = date.toLocaleString('id-ID', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            div.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <p class="text-sm font-medium text-gray-900 truncate">
                            ${conv.summary || 'Ide Baru'}
                        </p>
                        <p class="text-xs text-gray-500">${formattedDate}</p>
                    </div>
                    <button onclick="deleteConversation('${conv.ConversationId}', event)" 
                            class="text-gray-400 hover:text-red-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            
            conversationsList.appendChild(div);
        });
    } catch (error) {
        console.error('Error loading conversations:', error);
        showError('Gagal memuat daftar percakapan');
    }
}

async function loadConversation(conversationId) {
    if (isProcessing) return;
    
    try {
        showLoading();
        currentConversationId = conversationId;
        clearMessages();
        enableChat();
        
        const response = await fetch(`/idekreator/history/${conversationId}/50`);
        const data = await response.json();
        
        if (data.result?.history) {
            data.result.history.forEach(message => {
                addMessageToChat(
                    message.Role.toLowerCase() === 'user' ? 'user' : 'ai',
                    message.Content
                );
            });
        }
        
        await loadConversations();
    } catch (error) {
        console.error('Error loading conversation:', error);
        showError('Gagal memuat percakapan');
        disableChat();
    } finally {
        hideLoading();
    }
}

async function deleteConversation(conversationId, event) {
    if (event) {
        event.stopPropagation();
    }
    
    if (!confirm('Apakah Anda yakin ingin menghapus percakapan ini?')) return;
    
    try {
        showLoading();
        await fetch(`/idekreator/conversation/${conversationId}`, {
            method: 'DELETE'
        });
        
        if (currentConversationId === conversationId) {
            currentConversationId = null;
            clearMessages();
            disableChat();
        }
        
        await loadConversations();
    } catch (error) {
        console.error('Error deleting conversation:', error);
        showError('Gagal menghapus percakapan');
    }
 finally {
        hideLoading();
    }
}

function clearMessages() {
    messagesDiv.innerHTML = `
        <div class="max-w-3xl mx-auto">
            <div class="text-center text-gray-500 my-8" id="welcome-message">
                <h2 class="text-2xl font-bold mb-4">Anda Dapat Menemukan Ratusan Ide Konten Disini!</h2>
                <p class="mb-4">Mulai dengan,  Button + Ide Konten Baru.</p>
            </div>
        </div>
    `;
}

function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

function toggleSidebar() {
    const sidebar = document.querySelector('.md\\:flex-shrink-0');
    sidebar.classList.toggle('hidden');
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadConversations();
    disableChat();
});

// Handle enter key
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage(e);
    }
});

// Handle window resize
window.addEventListener('resize', () => {
    const sidebar = document.querySelector('.md\\:flex-shrink-0');
    if (window.innerWidth >= 768) {
        sidebar.classList.remove('hidden');
    }
});

// Error boundary
window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    showError('Terjadi kesalahan yang tidak terduga');
});
</script>

<style>
    /* Existing styles... */
    
    /* Copy button styles */
    .code-block-wrapper button {
        transition: all 0.2s ease;
    }
    
    .code-block-wrapper button:hover {
        background-color: #4B5563;
    }
    
    .code-block-wrapper button:active {
        transform: scale(0.95);
    }
    
    /* Add smooth transition for copy feedback */
    .copy-feedback {
        transition: opacity 0.2s ease;
    }
    
    /* Adjust spacing for copy button in regular messages */
    .message-copy-btn {
        opacity: 0;
        transition: opacity 0.2s ease;
    }
    
    .message:hover .message-copy-btn {
        opacity: 1;
    }
    </style>