<%- contentFor('body') %>
<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-900">Background Removal</h1>
        <p class="text-gray-600 mt-2">Remove background from your images with AI</p>
    </div>

    <!-- Upload Section -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <form id="uploadForm" class="space-y-4">
            <!-- Dropzone -->
            <div id="dropzone" class="border-2 border-dashed border-blue-400 rounded-lg p-8 text-center cursor-pointer hover:bg-blue-50 transition-colors">
                <input type="file" id="imageInput" accept="image/jpeg,image/png" class="hidden">
                <div id="dropzone-content">
                    <svg class="mx-auto h-12 w-12 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    <p class="mt-4 text-gray-600">Drag and drop your image here, or click to select</p>
                    <p class="mt-2 text-sm text-gray-500">PNG, JPG or JPEG (max. 5MB)</p>
                </div>
                <div id="preview-container" class="hidden">
                    <img id="image-preview" class="max-h-64 mx-auto rounded-lg">
                    <button type="button" id="remove-image" class="mt-4 text-red-600 hover:text-red-800">
                        Remove image
                    </button>
                </div>
            </div>

            <!-- Progress Bar -->
            <div id="progress-container" class="hidden">
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300"></div>
                </div>
                <p id="progress-text" class="text-sm text-gray-600 mt-2 text-center"></p>
            </div>

            <button type="submit" 
                    class="w-full bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                Remove Background
            </button>
        </form>
    </div>

    <!-- Result Section -->
    <div id="result" class="hidden bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-lg font-semibold mb-4">Result</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Original Image</h3>
                <img id="original-preview" class="w-full rounded-lg">
            </div>
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Processed Image</h3>
                <img id="processed-preview" class="w-full rounded-lg">
            </div>
        </div>
        <div class="mt-6 flex justify-end">
            <button onclick="downloadImage()" 
                    class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                Download Result
            </button>
        </div>
    </div>

    <!-- History Section -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-lg font-semibold mb-4">History</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="history-container">
            <% if (history && history.length > 0) { %>
                <% history.forEach(item => { %>
                    <div class="bg-gray-50 rounded-lg overflow-hidden" data-id="<%= item.id %>">
                        <div class="grid grid-cols-2 gap-2 p-4">
                            <img src="<%= item.original_image %>" 
                                 alt="Original" 
                                 class="w-full h-32 object-cover rounded">
                            <img src="<%= item.result_image %>" 
                                 alt="Result" 
                                 class="w-full h-32 object-cover rounded">
                        </div>
                        <div class="p-4 border-t">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-500">
                                    <%= new Date(item.created_at).toLocaleString() %>
                                </span>
                                <div class="space-x-2">
                                    <button onclick="downloadHistoryImage('<%= item.result_image %>')"
                                            class="text-blue-600 hover:text-blue-800 text-sm transition-colors">
                                        Download
                                    </button>
                                    <button onclick="deleteHistory('<%= item.id %>')"
                                            class="text-red-600 hover:text-red-800 text-sm transition-colors">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-span-full text-center text-gray-500 py-8">
                    No history yet. Start by removing background from an image!
                </div>
            <% } %>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
let currentImage = null;
let processedImageUrl = null;

const dropzone = document.getElementById('dropzone');
const imageInput = document.getElementById('imageInput');
const previewContainer = document.getElementById('preview-container');
const imagePreview = document.getElementById('image-preview');
const dropzoneContent = document.getElementById('dropzone-content');
const progressContainer = document.getElementById('progress-container');
const progressBar = document.getElementById('progress-bar');
const progressText = document.getElementById('progress-text');
const form = document.getElementById('uploadForm');

// Dropzone functionality
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropzone.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
    dropzone.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
    dropzone.addEventListener(eventName, unhighlight, false);
});

function unhighlight(e) {
        dropzone.classList.remove('border-blue-600', 'bg-blue-50');
    }

    function highlight(e) {
        dropzone.classList.add('border-blue-600', 'bg-blue-50');
    }

    dropzone.addEventListener('drop', handleDrop, false);
    dropzone.addEventListener('click', () => imageInput.click());

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const file = dt.files[0];
        handleFile(file);
    }

    imageInput.addEventListener('change', (e) => {
        handleFile(e.target.files[0]);
    });

    function handleFile(file) {
        if (!file) return;
        
        // Validate file type
        if (!file.type.match('image/jpeg') && !file.type.match('image/png')) {
            showNotification('Please upload a valid image file (JPEG or PNG)', 'error');
            return;
        }

        // Validate file size (5MB)
        if (file.size > 5 * 1024 * 1024) {
            showNotification('File size must be less than 5MB', 'error');
            return;
        }

        currentImage = file;
        showPreview(file);
    }

    function showPreview(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            imagePreview.src = e.target.result;
            dropzoneContent.classList.add('hidden');
            previewContainer.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    }

    document.getElementById('remove-image').addEventListener('click', () => {
        currentImage = null;
        imageInput.value = '';
        dropzoneContent.classList.remove('hidden');
        previewContainer.classList.add('hidden');
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!currentImage) {
            showNotification('Please select an image first', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('image', currentImage);

        try {
            showProgress();
            const submitButton = form.querySelector('button[type="submit"]');
            submitButton.disabled = true;

            const response = await fetch('/background-remove/remove', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Failed to process image');
            }

            const data = await response.json();
            
            if (data.success) {
                showResult(data.originalImage, data.processedImage);
                processedImageUrl = data.processedImage;
                await refreshHistory();
                showNotification('Background removed successfully!');
                resetForm();
            } else {
                throw new Error(data.error || 'Failed to process image');
            }

        } catch (error) {
            console.error('Error:', error);
            showNotification(error.message || 'Failed to process image', 'error');
        } finally {
            hideProgress();
            submitButton.disabled = false;
        }
    });

    function showProgress() {
        progressContainer.classList.remove('hidden');
        progressBar.style.width = '0%';
        progressText.textContent = 'Processing...';
        
        // Simulate progress
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 30;
            if (progress > 90) {
                clearInterval(interval);
                return;
            }
            progressBar.style.width = `${Math.min(progress, 90)}%`;
        }, 500);
    }

    function hideProgress() {
        progressContainer.classList.add('hidden');
        progressBar.style.width = '100%';
    }

    function showResult(originalImage, processedImage) {
        const resultSection = document.getElementById('result');
        document.getElementById('original-preview').src = originalImage;
        document.getElementById('processed-preview').src = processedImage;
        resultSection.classList.remove('hidden');
        resultSection.scrollIntoView({ behavior: 'smooth' });
    }

    function resetForm() {
        currentImage = null;
        imageInput.value = '';
        dropzoneContent.classList.remove('hidden');
        previewContainer.classList.add('hidden');
    }

    async function downloadImage(url = processedImageUrl) {
        try {
            const link = document.createElement('a');
            link.href = url;
            link.download = `removed-bg-${Date.now()}.png`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error('Download error:', error);
            showNotification('Failed to download image', 'error');
        }
    }

    function downloadHistoryImage(url) {
        downloadImage(url);
    }

    async function deleteHistory(id) {
        if (!confirm('Are you sure you want to delete this image?')) return;

        try {
            const response = await fetch(`/background-remove/history/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                const element = document.querySelector(`[data-id="${id}"]`);
                element.style.opacity = '0';
                setTimeout(() => element.remove(), 300);
                showNotification('Image deleted successfully');
            } else {
                throw new Error('Failed to delete image');
            }
        } catch (error) {
            console.error('Delete error:', error);
            showNotification('Failed to delete image', 'error');
        }
    }

    async function refreshHistory() {
        try {
            const response = await fetch(window.location.href);
            const text = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, 'text/html');
            const newHistory = doc.getElementById('history-container');
            
            if (newHistory) {
                document.getElementById('history-container').innerHTML = newHistory.innerHTML;
            }
        } catch (error) {
            console.error('Error refreshing history:', error);
        }
    }

    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
            type === 'success' ? 'bg-green-500' : 'bg-red-500'
        } text-white transition-opacity duration-300`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
</script>

<%- contentFor('style') %>
<style>
.dropzone {
    transition: all 0.3s ease;
}

.dropzone:hover {
    border-color: #2563EB;
    background-color: #EFF6FF;
}

#progress-bar {
    transition: width 0.3s ease;
}

.history-item {
    transition: all 0.2s ease;
}

.history-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.animate-fade {
    animation: fade 0.3s ease-in-out;
}

@keyframes fade {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}
</style>