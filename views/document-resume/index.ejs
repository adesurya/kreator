<%- contentFor('body') %>
<div class="flex h-screen bg-gray-100">
   <div class="flex-1 flex flex-col bg-white">
       <!-- Header -->
       <div class="flex-shrink-0 h-16 bg-white border-b border-gray-200 flex items-center justify-between px-6">
           <div class="flex items-center">
               <h1 class="text-lg font-medium text-gray-900">Document Resume</h1>
           </div>
       </div>

       <!-- Main Content -->
       <div class="flex-1 overflow-y-auto p-6">
           <div class="max-w-3xl mx-auto">
               <!-- Upload Form -->
               <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                   <form id="uploadForm" class="space-y-4">
                       <div class="flex flex-col">
                           <label class="block text-sm font-medium text-gray-700 mb-2">Upload Document (PDF/DOCX) - Max 50MB</label>
                           <input type="file" name="document" accept=".pdf,.docx" 
                                  class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" required>
                       </div>
                       <button type="submit" 
                               class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                           Generate Summary
                       </button>
                   </form>

                   <!-- Progress Section -->
                   <div id="progressSection" class="mt-4 hidden">
                       <div class="flex items-center justify-between mb-2">
                           <span class="text-sm font-medium text-gray-700">Processing document...</span>
                           <span id="progressPercentage" class="text-sm font-medium text-blue-600">0%</span>
                       </div>
                       <div class="w-full bg-gray-200 rounded-full h-2.5">
                           <div id="progressBar" class="bg-blue-600 h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                       </div>
                       <p id="progressStatus" class="text-sm text-gray-500 mt-2 text-center"></p>
                   </div>
               </div>

               <!-- Result Section -->
               <div id="resultSection" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
                   <div class="mb-4">
                       <div class="flex justify-between items-center mb-4">
                           <h2 class="text-lg font-medium text-gray-900">Summary Result</h2>
                           <button onclick="copyToClipboard()" 
                                   class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                               </svg>
                               Copy
                           </button>
                       </div>
                       <div id="summaryText" class="bg-gray-50 p-4 rounded-md text-gray-700 whitespace-pre-line break-words"></div>
                   </div>
               </div>

               <!-- History Section -->
               <div class="bg-white rounded-lg shadow-md p-6">
                   <h2 class="text-lg font-medium text-gray-900 mb-4">History</h2>
                   <div id="historyList" class="space-y-4">
                       <!-- Histories will be loaded here -->
                   </div>
               </div>
           </div>
       </div>
   </div>
</div>

<script>
document.getElementById('uploadForm').addEventListener('submit', async function(e) {
   e.preventDefault();
   
   const formData = new FormData(this);
   const file = formData.get('document');

   if (file.size > 50 * 1024 * 1024) {
       alert('File size exceeds 50MB limit');
       return;
   }

   const submitButton = this.querySelector('button[type="submit"]');
   const progressSection = document.getElementById('progressSection');
   const progressBar = document.getElementById('progressBar');
   const progressPercentage = document.getElementById('progressPercentage');
   const progressStatus = document.getElementById('progressStatus');
   const resultSection = document.getElementById('resultSection');

   submitButton.disabled = true;
   progressSection.classList.remove('hidden');
   resultSection.classList.add('hidden');

   try {
       const response = await fetch('/api/document-resume/summarize', {
           method: 'POST',
           body: formData
       });

       const reader = response.body.getReader();
       const decoder = new TextDecoder();

       while (true) {
           const {value, done} = await reader.read();
           if (done) break;
           
           const text = decoder.decode(value);
           const lines = text.split('\n').filter(line => line.trim());
           
           for (const line of lines) {
               try {
                   const data = JSON.parse(line);
                   if (data.progress) {
                       progressBar.style.width = `${data.progress}%`;
                       progressPercentage.textContent = `${data.progress}%`;
                       
                       if (data.status === 'processing') {
                           progressStatus.textContent = `Analyzing document... (${data.progress}% complete)`;
                       }
                   }
                   
                   if (data.status === 'completed') {
                       progressStatus.textContent = 'Document analysis completed!';
                       document.getElementById('summaryText').textContent = data.summary;
                       resultSection.classList.remove('hidden');
                       loadHistories();
                   }

                   if (data.status === 'error') {
                       progressStatus.textContent = `Error: ${data.error}`;
                       throw new Error(data.error);
                   }
               } catch (e) {
                   console.error('Error parsing progress:', e);
               }
           }
       }
   } catch (error) {
       progressStatus.textContent = 'Error processing document';
       alert('Failed to process document: ' + error.message);
   } finally {
       submitButton.disabled = false;
   }
});

async function loadHistories() {
   try {
       const response = await fetch('/api/document-resume/histories');
       const result = await response.json();
       
       if (result.statusCode === 200) {
           const historyList = document.getElementById('historyList');
           historyList.innerHTML = result.result.map(item => `
               <div class="border rounded-md p-4">
                   <div class="flex justify-between items-start mb-2">
                       <h3 class="font-medium text-gray-900">${item.original_filename}</h3>
                       <div class="flex space-x-2">
                           <button onclick="copyHistory('${item.id}')" class="text-blue-500 hover:text-blue-700">
                               <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                               </svg>
                           </button>
                           <button onclick="deleteHistory(${item.id})" class="text-red-500 hover:text-red-700">
                               <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                               </svg>
                           </button>
                       </div>
                   </div>
                   <div class="text-gray-600 mb-2 whitespace-pre-line">${item.summary}</div>
                   <p class="text-sm text-gray-400">${new Date(item.created_at).toLocaleString()}</p>
               </div>
           `).join('');
       }
   } catch (error) {
       console.error('Failed to load histories:', error);
   }
}

async function deleteHistory(id) {
   if (!confirm('Are you sure you want to delete this history?')) return;
   
   try {
       const response = await fetch(`/api/document-resume/history/${id}`, {
           method: 'DELETE'
       });
       const result = await response.json();
       
       if (result.statusCode === 200) {
           loadHistories();
       } else {
           alert(result.error || 'Failed to delete history');
       }
   } catch (error) {
       alert('Failed to delete history');
   }
}

function copyToClipboard() {
   const text = document.getElementById('summaryText').textContent;
   navigator.clipboard.writeText(text);
   showToast('Summary copied to clipboard!');
}

function copyHistory(id) {
   const historyItem = document.querySelector(`#historyList [data-id="${id}"]`);
   if (historyItem) {
       const text = historyItem.querySelector('.text-gray-600').textContent;
       navigator.clipboard.writeText(text);
       showToast('Summary copied to clipboard!');
   }
}

function showToast(message) {
   // Create toast element
   const toast = document.createElement('div');
   toast.className = 'fixed bottom-4 right-4 bg-black bg-opacity-75 text-white px-4 py-2 rounded-md transition-opacity duration-300';
   toast.textContent = message;

   // Add to document
   document.body.appendChild(toast);

   // Remove after 3 seconds
   setTimeout(() => {
       toast.style.opacity = '0';
       setTimeout(() => toast.remove(), 300);
   }, 3000);
}

// Load histories on page load
loadHistories();
</script>