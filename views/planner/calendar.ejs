<!-- views/planner/calendar.ejs -->
<%- contentFor('style') %>
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css' rel='stylesheet'>
<style>
.fc { 
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
}

.calendar-container {
    background-color: #f3f4f6;
    padding: 20px;
    border-radius: 12px;
    margin-top: 20px;
}

.fc .fc-toolbar {
    flex-wrap: wrap;
    gap: 10px;
}

.fc .fc-toolbar-title {
    font-size: 1.2em;
}

.fc-theme-standard td, .fc-theme-standard th {
    border: 1px solid #e5e7eb;
}

.fc-day:hover {
    background-color: #f8fafc;
    cursor: pointer;
}

.fc-event {
    cursor: pointer;
    padding: 2px 4px;
    border-radius: 4px;
    margin: 2px 0;
}

.fc-daygrid-event {
    white-space: normal !important;
    align-items: normal !important;
}

/* Responsive styling */
@media (max-width: 768px) {
    .fc .fc-toolbar {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .fc .fc-toolbar-title {
        font-size: 1.1em;
        margin: 8px 0;
    }

    .fc .fc-button {
        padding: 6px 12px;
        font-size: 0.9em;
    }

    .fc-header-toolbar {
        margin-bottom: 1em !important;
    }
}
</style>

<%- contentFor('body') %>
<div class="container mx-auto px-4 py-6">
    <!-- Header Section -->
    <div class="flex items-center gap-4">
        <button onclick="showAddPostModal()" 
                class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Add Post
        </button>
        <div class="relative" id="exportDropdown">
            <button onclick="toggleExportMenu()"
                    class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                Export
            </button>
            <div id="exportMenu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
                <div class="py-1">
                    <a href="#" onclick="exportCalendar('pdf')" 
                       class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        Export as PDF
                    </a>
                    <a href="#" onclick="exportCalendar('png')" 
                       class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        Export as PNG
                    </a>
                </div>
            </div>
        </div>
    </div>

   

    <!-- Calendar Container with gray background -->
    <div class="calendar-container">
        <div id="calendar"></div>
    </div>
</div>

<!-- Add Post Modal -->
<div id="addPostModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 max-w-[90%] shadow-lg rounded-md bg-gray-100">
        <div class="bg-white p-6 rounded-lg shadow">
            <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Add New Post</h3>
            <form id="addPostForm">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Date</label>
                    <input type="date" name="post_date" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Time</label>
                    <input type="time" name="post_time" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Title</label>
                    <input type="text" name="title" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea name="description" rows="3" required
                              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Social Media Platforms</label>
                    <div class="space-y-2">
                        <label class="flex items-center">
                            <input type="checkbox" value="facebook" name="social_media"
                                   class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2">Facebook</span>
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" value="instagram" name="social_media"
                                   class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2">Instagram</span>
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" value="tiktok" name="social_media"
                                   class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2">Tiktok</span>
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" value="twitter" name="social_media"
                                   class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="ml-2">Twitter</span>
                        </label>
                    </div>
                </div>
                <div class="mt-6 flex justify-end gap-3">
                    <button type="button" onclick="hideAddPostModal()"
                            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        Add Post
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('calendar');
    const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
    },
    height: 'auto',
    events: <%- events %>, // posts sudah dalam bentuk JSON string
    eventDidMount: function(info) {
        info.el.style.backgroundColor = '#3B82F6';
        info.el.style.borderColor = '#2563EB';
    },
    dateClick: function(info) {
        showAddPostModal(info.date);
    },
    eventClick: function(info) {
        showPostDetails(info.event);
    },
    windowResize: function(view) {
        calendar.updateSize();
    }
});

    calendar.render();

    // Add Post Form Handler
    document.getElementById('addPostForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);
        const socialMediaChecked = document.querySelectorAll('input[name="social_media"]:checked');
        const socialMedia = Array.from(socialMediaChecked).map(input => input.value);

        if (socialMedia.length === 0) {
            showNotification('Please select at least one social media platform', 'error');
            return;
        }

        const postData = {
            post_date: formData.get('post_date'),
            post_time: formData.get('post_time'),
            title: formData.get('title'),
            description: formData.get('description'),
            social_media: socialMedia
        };

        try {
            const response = await fetch('/planner/post', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(postData)
            });

            const data = await response.json();

            if (data.success) {
                calendar.addEvent({
                    title: postData.title,
                    start: `${postData.post_date}T${postData.post_time}`,
                    description: postData.description,
                    extendedProps: {
                        social_media: postData.social_media
                    }
                });

                hideAddPostModal();
                showNotification('Post added successfully');
                calendar.refetchEvents();
            } else {
                throw new Error(data.error || 'Failed to add post');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification(error.message || 'Failed to add post', 'error');
        }
    });
});

function showAddPostModal(date = null) {
    const modal = document.getElementById('addPostModal');
    const dateInput = modal.querySelector('input[name="post_date"]');
    
    if (date) {
        const formattedDate = date.toISOString().split('T')[0];
        dateInput.value = formattedDate;
    }
    
    modal.classList.remove('hidden');
}

function hideAddPostModal() {
    const modal = document.getElementById('addPostModal');
    document.getElementById('addPostForm').reset();
    modal.classList.add('hidden');
}

function showPostDetails(event) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
    modal.innerHTML = `
        <div class="relative top-20 mx-auto p-5 border w-96 max-w-[90%] shadow-lg rounded-md bg-gray-100">
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-bold mb-4">${event.title}</h3>
                <p class="text-gray-600 mb-4">${event.extendedProps.description || ''}</p>
                <p class="mb-2"><strong>Time:</strong> ${event.start.toLocaleTimeString()}</p>
                <div class="mb-4">
                    <strong>Platforms:</strong>
                    <div class="flex flex-wrap gap-2 mt-2">
                        ${event.extendedProps.social_media.map(platform => 
                            `<span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">${platform}</span>`
                        ).join('')}
                    </div>
                </div>
                <div class="flex justify-end">
                    <button onclick="this.closest('.fixed').remove()" 
                            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">
                        Close
                    </button>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    } text-white`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

// Add this for debugging
window.addEventListener('error', function(e) {
    console.error('Global error:', e);
    showNotification('An error occurred', 'error');
});

function toggleExportMenu() {
    document.getElementById('exportMenu').classList.toggle('hidden');
}

function exportCalendar(format) {
    const loadingNotification = showNotification('Generating export...', 'info', false);
    
    const date = new Date();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    
    fetch(`/planner/export?format=${format}&month=${month}&year=${year}`, {
        method: 'GET',
    })
    .then(response => {
        if (!response.ok) throw new Error('Export failed');
        return response.blob();
    })
    .then(blob => {
        // Create download link
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `calendar-${year}-${month}.${format}`;
        
        document.body.appendChild(a);
        a.click();
        
        // Cleanup
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        if (loadingNotification) loadingNotification.remove();
        showNotification('Export completed!', 'success');
    })
    .catch(error => {
        console.error('Export error:', error);
        if (loadingNotification) loadingNotification.remove();
        showNotification('Failed to export calendar', 'error');
    });
    
    // Hide dropdown
    document.getElementById('exportMenu').classList.add('hidden');
}

// Updated notification function
function showNotification(message, type = 'success', autoHide = true) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        'bg-blue-500'
    } text-white`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    if (autoHide) {
        setTimeout(() => notification.remove(), 3000);
    }
    
    return notification;
}

// Update calendar initialization
document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('calendar');
    let calendar;

    try {
        const events = <%- events %>;
        
        calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            height: 'auto',
            events: events,
            eventDidMount: function(info) {
                info.el.style.backgroundColor = '#3B82F6';
                info.el.style.borderColor = '#2563EB';
            },
            dateClick: function(info) {
                showAddPostModal(info.date);
            },
            eventClick: function(info) {
                showPostDetails(info.event);
            }
        });

        calendar.render();
    } catch (error) {
        console.error('Error initializing calendar:', error);
        showNotification('Error loading calendar', 'error');
    }
});


</script>