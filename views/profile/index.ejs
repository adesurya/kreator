<%- contentFor('body') %>
<div class="min-h-screen bg-gray-100 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-gray-900">Profile Settings</h1>
            <p class="mt-1 text-sm text-gray-600">Manage your account settings and change your password</p>
        </div>

        <!-- Notification -->
        <% if (error) { %>
            <div class="mb-4 bg-red-50 border-l-4 border-red-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700"><%= error %></p>
                    </div>
                </div>
            </div>
        <% } %>

        <% if (success) { %>
            <div class="mb-4 bg-green-50 border-l-4 border-green-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-green-700"><%= success %></p>
                    </div>
                </div>
            </div>
        <% } %>

        <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
            <!-- Profile Information -->
            <div class="bg-white shadow rounded-lg divide-y divide-gray-200">
                <div class="px-6 py-4">
                    <h2 class="text-lg font-medium text-gray-900">Profile Information</h2>
                    <p class="mt-1 text-sm text-gray-500">Update your account's profile information.</p>
                </div>
                <div class="px-6 py-4">
                    <form action="/profile/update" method="POST" class="space-y-4">
                        <div>
                            <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                            <input type="text" name="username" id="username" 
                                   value="<%= profile.username %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                   required>
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" name="email" id="email" 
                                   value="<%= profile.email %>"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                   required>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700">Member Since</label>
                            <div class="mt-1 text-sm text-gray-900">
                                <%= new Date(profile.created_at).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </div>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" 
                                    class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Password Update -->
            <div class="bg-white shadow rounded-lg divide-y divide-gray-200">
                <div class="px-6 py-4">
                    <h2 class="text-lg font-medium text-gray-900">Update Password</h2>
                    <p class="mt-1 text-sm text-gray-500">Ensure your account is using a secure password.</p>
                </div>
                <div class="px-6 py-4">
                    <form action="/profile/change-password" method="POST" class="space-y-4" id="passwordForm">
                        <div>
                            <label for="currentPassword" class="block text-sm font-medium text-gray-700">Current Password</label>
                            <input type="password" name="currentPassword" id="currentPassword" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                   required>
                        </div>

                        <div>
                            <label for="newPassword" class="block text-sm font-medium text-gray-700">New Password</label>
                            <input type="password" name="newPassword" id="newPassword" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                   required
                                   minlength="6">
                        </div>

                        <div>
                            <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                            <input type="password" name="confirmPassword" id="confirmPassword" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                   required>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" 
                                    class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                                Update Password
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
document.getElementById('passwordForm').addEventListener('submit', function(e) {
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (newPassword !== confirmPassword) {
        e.preventDefault();
        alert('New passwords do not match');
        return;
    }

    if (newPassword.length < 6) {
        e.preventDefault();
        alert('Password must be at least 6 characters long');
        return;
    }
});

// Show/hide notifications after 5 seconds
document.addEventListener('DOMContentLoaded', function() {
    const notifications = document.querySelectorAll('.bg-red-50, .bg-green-50');
    if (notifications.length > 0) {
        setTimeout(() => {
            notifications.forEach(notification => {
                notification.style.transition = 'opacity 0.5s ease-out';
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 500);
            });
        }, 5000);
    }
});

// Add transition effects for form submission
const forms = document.querySelectorAll('form');
forms.forEach(form => {
    form.addEventListener('submit', function() {
        const button = this.querySelector('button[type="submit"]');
        button.disabled = true;
        button.innerHTML = '<span class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Processing...</span>';
    });
});

// Password strength indicator
const newPasswordInput = document.getElementById('newPassword');
let strengthIndicator = document.createElement('div');
strengthIndicator.className = 'mt-1 text-sm';
newPasswordInput.parentNode.appendChild(strengthIndicator);

newPasswordInput.addEventListener('input', function() {
    const password = this.value;
    const strength = getPasswordStrength(password);
    updateStrengthIndicator(strength);
});

function getPasswordStrength(password) {
    let strength = 0;
    
    // Length check
    if (password.length >= 6) strength += 1;
    if (password.length >= 8) strength += 1;
    
    // Character type checks
    if (/[0-9]/.test(password)) strength += 1; // Numbers
    if (/[a-z]/.test(password)) strength += 1; // Lowercase
    if (/[A-Z]/.test(password)) strength += 1; // Uppercase
    if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Special characters
    
    return strength;
}

function updateStrengthIndicator(strength) {
    let message, color;
    
    switch(true) {
        case (strength <= 2):
            message = 'Weak';
            color = 'text-red-500';
            break;
        case (strength <= 4):
            message = 'Moderate';
            color = 'text-yellow-500';
            break;
        default:
            message = 'Strong';
            color = 'text-green-500';
            break;
    }
    
    strengthIndicator.className = `mt-1 text-sm ${color} flex items-center`;
    strengthIndicator.innerHTML = `
        <div class="w-full bg-gray-200 rounded-full h-2 mr-2">
            <div class="h-2 rounded-full transition-all duration-300 ${color.replace('text', 'bg')}" 
                 style="width: ${(strength/6)*100}%"></div>
        </div>
        <span>${message}</span>
    `;
}

// Form validation with visual feedback
const inputs = document.querySelectorAll('input[type="text"], input[type="email"], input[type="password"]');
inputs.forEach(input => {
    // Add focus effects
    input.addEventListener('focus', () => {
        input.parentElement.classList.add('ring-2', 'ring-blue-100', 'rounded-md');
    });
    
    input.addEventListener('blur', () => {
        input.parentElement.classList.remove('ring-2', 'ring-blue-100', 'rounded-md');
        
        // Validate on blur
        validateInput(input);
    });
});

function validateInput(input) {
    let isValid = true;
    const errorDiv = input.parentElement.querySelector('.error-message') || 
                    document.createElement('div');
    errorDiv.className = 'error-message text-sm text-red-500 mt-1';
    
    switch(input.type) {
        case 'email':
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            isValid = emailRegex.test(input.value);
            if (!isValid) {
                errorDiv.textContent = 'Please enter a valid email address';
            }
            break;
            
        case 'password':
            if (input.id === 'newPassword') {
                isValid = input.value.length >= 6;
                if (!isValid) {
                    errorDiv.textContent = 'Password must be at least 6 characters long';
                }
            } else if (input.id === 'confirmPassword') {
                const newPassword = document.getElementById('newPassword').value;
                isValid = input.value === newPassword;
                if (!isValid) {
                    errorDiv.textContent = 'Passwords do not match';
                }
            }
            break;
            
        default:
            isValid = input.value.trim().length > 0;
            if (!isValid) {
                errorDiv.textContent = 'This field is required';
            }
    }
    
    if (!isValid) {
        input.classList.add('border-red-500');
        if (!input.parentElement.querySelector('.error-message')) {
            input.parentElement.appendChild(errorDiv);
        }
    } else {
        input.classList.remove('border-red-500');
        const existingError = input.parentElement.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
    }
    
    return isValid;
}

// Add responsive breakpoint handling
function handleResponsiveLayout() {
    const container = document.querySelector('.grid');
    if (window.innerWidth < 1024) { // lg breakpoint
        container.classList.remove('grid-cols-2');
        container.classList.add('grid-cols-1');
    } else {
        container.classList.remove('grid-cols-1');
        container.classList.add('grid-cols-2');
    }
}

window.addEventListener('resize', handleResponsiveLayout);
handleResponsiveLayout(); // Initial check