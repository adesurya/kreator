<%- contentFor('body') %>
<div class="flex h-screen bg-gray-100">
    <!-- Sidebar -->
    <div class="hidden md:flex md:flex-shrink-0">
        <div class="flex flex-col w-80">
            <div class="flex flex-col h-0 flex-1 border-r border-gray-200 bg-white">
                <!-- New Chat Button -->
                <div class="flex-shrink-0 px-4 py-4 border-b border-gray-200">
                    <button onclick="startNewConversation()" 
                            class="flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        New Chat
                    </button>
                </div>

                <!-- Conversations List -->
                <div class="flex-1 overflow-y-auto">
                    <div id="conversations-list" class="divide-y divide-gray-200">
                        <!-- Conversations will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="flex-1 flex flex-col bg-white">
        <!-- Chat Header -->
        <div class="flex-shrink-0 h-16 bg-white border-b border-gray-200 flex items-center justify-between px-6">
            <div class="flex items-center">
                <button class="md:hidden mr-4 text-gray-500 hover:text-gray-600" onclick="toggleSidebar()">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                    </svg>
                </button>
                <h1 class="text-lg font-medium text-gray-900">AI Chat Assistant</h1>
            </div>
            <div id="conversation-actions" class="hidden">
                <button onclick="deleteCurrentConversation()" class="text-gray-400 hover:text-red-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Messages Area -->
        <div class="flex-1 overflow-y-auto p-6" id="chat-messages">
            <div class="max-w-3xl mx-auto">
                <div class="text-center text-gray-500 my-8" id="welcome-message">
                    <h2 class="text-2xl font-bold mb-4">Welcome to AI Chat Assistant</h2>
                    <p class="mb-4">Start a new conversation or select an existing one.</p>
                </div>
            </div>
        </div>

        <!-- Input Area -->
        <div class="flex-shrink-0 bg-white border-t border-gray-200 p-4">
            <div class="max-w-3xl mx-auto">
                <form onsubmit="sendMessage(event)" class="flex space-x-4">
                    <input type="text" 
                           id="message-input"
                           placeholder="Type your message..."
                           class="flex-1 rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                           disabled>
                    <button type="submit" 
                            id="send-button"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
                            disabled>
                        Send
                    </button>
                </form>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="hidden fixed bottom-20 left-1/2 transform -translate-x-1/2">
            <div class="bg-white rounded-full shadow-lg px-4 py-2">
                <div class="flex items-center space-x-2">
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                    <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
let currentConversationId = null;
let isProcessing = false;

// Elements
const messagesDiv = document.getElementById('chat-messages');
const messageInput = document.getElementById('message-input');
const sendButton = document.getElementById('send-button');
const loadingIndicator = document.getElementById('loading-indicator');
const welcomeMessage = document.getElementById('welcome-message');
const conversationActions = document.getElementById('conversation-actions');

function enableChat() {
    messageInput.disabled = false;
    sendButton.disabled = false;
    welcomeMessage.classList.add('hidden');
    conversationActions.classList.remove('hidden');
}

function disableChat() {
    messageInput.disabled = true;
    sendButton.disabled = true;
    welcomeMessage.classList.remove('hidden');
    conversationActions.classList.add('hidden');
}

function showLoading() {
    loadingIndicator.classList.remove('hidden');
    isProcessing = true;
}

function hideLoading() {
    loadingIndicator.classList.add('hidden');
    isProcessing = false;
}

async function startNewConversation() {
    try {
        showLoading();
        const response = await fetch('/chat/conversation/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                summary: 'New chat session ' + new Date().toLocaleString() 
            })
        });
        
        const data = await response.json();
        if (data.statusCode === 200) {
            currentConversationId = data.result.conversationId;
            clearMessages();
            enableChat();
            await loadConversations();
        }
    } catch (error) {
        console.error('Error starting conversation:', error);
        showError('Failed to start new conversation');
    } finally {
        hideLoading();
    }
}

async function sendMessage(event) {
    event.preventDefault();
    if (isProcessing) return;
    
    const message = messageInput.value.trim();
    if (!message) return;
    
    try {
        showLoading();
        messageInput.value = '';

        // Add user message immediately
        addMessageToChat('user', message);

        // Send message
        const response = await fetch(`/chat/message/${currentConversationId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message })
        });
        
        const data = await response.json();
        if (!data.result) throw new Error('Invalid response');

        // Poll for streaming response
        let attempts = 0;
        const maxAttempts = 30; // Maximum polling attempts
        const pollInterval = 1000; // Poll every 1 second

        const pollResponse = async () => {
            try {
                const streamResponse = await fetch(`/chat/stream/${data.result}`);
                const streamData = await streamResponse.json();
                
                if (streamData.result?.completed && streamData.result?.result?.['Generated Result']) {
                    // Response is complete, add to chat
                    addMessageToChat('ai', streamData.result.result['Generated Result']);
                    hideLoading();
                } else if (attempts < maxAttempts) {
                    // Continue polling if not complete
                    attempts++;
                    setTimeout(pollResponse, pollInterval);
                } else {
                    throw new Error('Response timeout');
                }
            } catch (error) {
                console.error('Streaming error:', error);
                hideLoading();
                showError('Failed to get response');
            }
        };

        // Start polling
        pollResponse();

    } catch (error) {
        console.error('Error sending message:', error);
        showError('Failed to send message');
        hideLoading();
    }
}

function addMessageToChat(type, content) {
    const messageContainer = document.createElement('div');
    messageContainer.className = `flex ${type === 'user' ? 'justify-end' : 'justify-start'} mb-4`;
    
    const messageContent = document.createElement('div');
    messageContent.className = `max-w-[90%] rounded-lg p-4 ${
        type === 'user' 
            ? 'bg-blue-600 text-white' 
            : 'bg-gray-100 text-gray-900'
    }`;
    
    if (content.includes('```') || content.includes('<!DOCTYPE html>') || content.includes('<html')) {
        messageContent.innerHTML = formatCodeBlocks(content);
    } else {
        messageContent.textContent = content;
    }
    
    messageContainer.appendChild(messageContent);
    messagesDiv.appendChild(messageContainer);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function formatCodeBlocks(content) {
    // Handle HTML content
    if (content.includes('<!DOCTYPE html>') || content.includes('<html')) {
        return `
            <div class="code-block-wrapper">
                <div class="code-header">
                    <span>HTML</span>
                    <button onclick="copyCode(this)" class="copy-button">Copy</button>
                </div>
                <pre><code class="language-html">${escapeHtml(content)}</code></pre>
            </div>`;
    }

    // Handle other code blocks with ```
    const parts = content.split('```');
    return parts.map((part, index) => {
        if (index % 2 === 1) { // Code block
            const [language, ...code] = part.split('\n');
            const langName = language.trim();
            return `
                <div class="code-block-wrapper">
                    <div class="code-header">
                        <span>${langName.toUpperCase()}</span>
                        <button onclick="copyCode(this)" class="copy-button">Copy</button>
                    </div>
                    <pre><code class="language-${langName}">${escapeHtml(code.join('\n'))}</code></pre>
                </div>`;
        }
        return `<p>${part}</p>`;
    }).join('');
}

function copyCode(button) {
    const pre = button.closest('.code-block-wrapper').querySelector('pre');
    const code = pre.textContent;
    
    navigator.clipboard.writeText(code).then(() => {
        button.textContent = 'Copied!';
        setTimeout(() => {
            button.textContent = 'Copy';
        }, 2000);
    });
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

async function loadConversations() {
    try {
        const response = await fetch('/chat/conversations');
        const data = await response.json();
        
        const conversationsList = document.getElementById('conversations-list');
        conversationsList.innerHTML = '';
        
        data.result.forEach(conv => {
            const div = document.createElement('div');
            div.className = `p-4 hover:bg-gray-50 cursor-pointer ${
                currentConversationId === conv.ConversationId ? 'bg-blue-50' : ''
            }`;
            div.setAttribute('data-conversation-id', conv.ConversationId);
            div.onclick = () => loadConversation(conv.ConversationId);
            
            const date = new Date(conv.CreatedAt * 1000);
            const formattedDate = date.toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            div.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <p class="text-sm font-medium text-gray-900 truncate">
                            ${conv.summary || 'New Conversation'}
                        </p>
                        <p class="text-xs text-gray-500">${formattedDate}</p>
                    </div>
                    <button onclick="deleteConversation('${conv.ConversationId}', event)" 
                            class="text-gray-400 hover:text-red-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            `;
            
            conversationsList.appendChild(div);
        });
    } catch (error) {
        console.error('Error loading conversations:', error);
        showError('Failed to load conversations');
    }
}

async function loadConversation(conversationId) {
    if (isProcessing) return;
    
    try {
        showLoading();
        currentConversationId = conversationId;
        clearMessages();
        enableChat();
        
        const response = await fetch(`/chat/history/${conversationId}/50`);
        const data = await response.json();
        
        if (data.result?.history) {
            data.result.history.forEach(message => {
                addMessageToChat(
                    message.Role.toLowerCase() === 'user' ? 'user' : 'ai',
                    message.Content
                );
            });
        }
        
        await loadConversations(); // Refresh sidebar
    } catch (error) {
        console.error('Error loading conversation:', error);
        showError('Failed to load conversation');
        disableChat();
    } finally {
        hideLoading();
    }
}

async function deleteConversation(conversationId, event) {
    if (event) {
        event.stopPropagation();
    }
    
    if (!confirm('Are you sure you want to delete this conversation?')) return;
    
    try {
        showLoading();
        await fetch(`/chat/conversation/${conversationId}`, {
            method: 'DELETE'
        });
        
        if (currentConversationId === conversationId) {
            currentConversationId = null;
            clearMessages();
            disableChat();
        }
        
        await loadConversations();
    } catch (error) {
        console.error('Error deleting conversation:', error);
        showError('Failed to delete conversation');
    } finally {
        hideLoading();
    }
}

function clearMessages() {
    messagesDiv.innerHTML = `
        <div class="max-w-3xl mx-auto">
            <div class="text-center text-gray-500 my-8" id="welcome-message">
                <h2 class="text-2xl font-bold mb-4">Welcome to AI Chat Assistant</h2>
                <p class="mb-4">Start a new conversation or select an existing one.</p>
            </div>
        </div>
    `;
}

function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadConversations();
    disableChat(); // Disable chat until conversation is selected or created
});

function toggleSidebar() {
    const sidebar = document.querySelector('.md\\:flex-shrink-0');
    sidebar.classList.toggle('hidden');
}

// Handle enter key in message input
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage(e);
    }
});

// Add window resize handler
window.addEventListener('resize', () => {
    const sidebar = document.querySelector('.md\\:flex-shrink-0');
    if (window.innerWidth >= 768) { // md breakpoint
        sidebar.classList.remove('hidden');
    }
});

// Add error boundary
window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    showError('An unexpected error occurred');
});
</script>

<%- contentFor('style') %>
<style>
/* Custom scrollbar */
.overflow-y-auto::-webkit-scrollbar {
    width: 6px;
}

.overflow-y-auto::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #666;
}

/* Code block styles */
pre code {
    font-family: 'Courier New', Courier, monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/* Loading animation */
@keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-4px); }
}

.animate-bounce {
    animation: bounce 0.6s infinite;
}

/* Message transition */
.message-enter {
    opacity: 0;
    transform: translateY(20px);
}

.message-enter-active {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 300ms, transform 300ms;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .max-w-[70%] {
        max-width: 85%;
    }
}

pre {
    position: relative;
    font-size: 0.9em;
    line-height: 1.5;
    tab-size: 4;
}

pre code {
    font-family: 'Courier New', Courier, monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.language-html {
    color: #e6e6e6;
}

/* Syntax highlighting colors */
.language-html .tag { color: #e06c75; }
.language-html .attr { color: #d19a66; }
.language-html .string { color: #98c379; }

/* Copy button hover effect */
button.hover\:bg-gray-600:hover {
    background-color: #4a5568;
}

.code-block-wrapper {
    margin: 1rem 0;
    font-family: monospace;
    background-color: #1a1a1a;
    border-radius: 8px;
    overflow: hidden;
}

/* Code header */
.code-header {
    background-color: #2d2d2d;
    padding: 0.5rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    font-size: 0.875rem;
}

.copy-button {
    background-color: #4a5568;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.75rem;
    cursor: pointer;
    border: none;
}

.copy-button:hover {
    background-color: #2d3748;
}

/* Pre and code elements */
.code-block-wrapper pre {
    margin: 0;
    padding: 1rem;
    overflow-x: auto;
}

.code-block-wrapper code {
    white-space: pre;
    word-wrap: normal;
    padding: 0;
    tab-size: 2;
}

/* Syntax highlighting */
.language-html {
    color: #e6e6e6;
}

.language-html .tag {
    color: #e06c75;
}

.language-html .attr-name {
    color: #d19a66;
}

.language-html .attr-value {
    color: #98c379;
}

.language-html .comment {
    color: #7f848e;
    font-style: italic;
}

/* Line numbers */
.code-block-wrapper pre {
    counter-reset: line;
}

.code-block-wrapper code {
    color: #e6e6e6;
    font-family: 'Courier New', Courier, monospace;
    font-size: 0.875rem;
    line-height: 1.5;
}

.code-block-wrapper code > span {
    display: inline-block;
    width: 100%;
}

/* Scrollbar styling */
.code-block-wrapper pre::-webkit-scrollbar {
    height: 8px;
}

.code-block-wrapper pre::-webkit-scrollbar-track {
    background: #2d2d2d;
}

.code-block-wrapper pre::-webkit-scrollbar-thumb {
    background: #666;
    border-radius: 4px;
}

.code-block-wrapper pre::-webkit-scrollbar-thumb:hover {
    background: #888;
}

/* Message container adjustments */
.message {
    max-width: 85%;
}

@media (min-width: 768px) {
    .message {
        max-width: 70%;
    }
}

/* Copy button states */
.copy-btn:disabled {
    opacity: 0.7;
}

.copy-btn.bg-green-600 {
    background-color: #059669;
}

/* Dark theme adjustments */
@media (prefers-color-scheme: dark) {
    .code-block-wrapper pre {
        background-color: #1a1a1a;
    }
    
    .code-header {
        background-color: #2d2d2d;
    }
}

/* Transition effects */
.copy-btn {
    transition: all 0.2s ease;
}

.code-block-wrapper {
    transition: transform 0.2s ease;
}

.code-block-wrapper:hover {
    transform: translateY(-1px);
}

</style>