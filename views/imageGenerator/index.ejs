<%- contentFor('style') %>
<style>
.step.active {
    color: #2563EB;
}

.step.active .step-indicator {
    border-color: #2563EB;
    background-color: #EFF6FF;
}

.step.complete {
    color: #059669;
}

.step.complete .step-indicator {
    border-color: #059669;
    background-color: #ECFDF5;
}

.step.complete .step-number {
    display: none;
}

.step.complete .checkmark {
    display: block;
}

.image-preview {
    min-height: 200px;
    background-color: #F3F4F6;
    border-radius: 0.5rem;
}

.generated-image {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
}

@keyframes progress {
    0% { width: 0%; }
    100% { width: 100%; }
}

.prompt-input {
    min-height: 100px;
    resize: vertical;
}
</style>

<%- contentFor('body') %>
<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-900">AI Image Generator</h1>
        <p class="text-gray-600 mt-2">Create unique images using AI. Just describe what you want to see!</p>
    </div>

    <!-- Generator Form -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <form id="generatorForm" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Enter your prompt
                </label>
                <textarea 
                    name="prompt" 
                    class="prompt-input w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    placeholder="Describe the image you want to generate... (e.g., 'A serene mountain landscape at sunset with a lake reflection')"
                    required></textarea>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Image Size
                </label>
                <select 
                    name="size" 
                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    <option value="1024x1024">1024x1024 (High Quality)</option>
                    <option value="512x512">512x512 (Medium Quality)</option>
                    <option value="256x256">256x256 (Low Quality)</option>
                </select>
            </div>

            <button type="submit" 
                    class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                Generate Image
            </button>
        </form>
    </div>

    <!-- Result Section -->
    <div id="result" class="hidden bg-white rounded-lg shadow-lg p-6 mb-8">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Generated Image</h2>
            <button onclick="downloadImage()" 
                    class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                Download Image
            </button>
        </div>
        <div class="relative">
            <!-- Image Preview -->
            <div class="image-preview">
                <img id="generated-image" src="" alt="Generated image" class="generated-image hidden">
                
                <!-- Loading State -->
                <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
                        <div class="text-center">
                            <div class="mb-4">
                                <div class="inline-block">
                                    <svg class="animate-spin h-8 w-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </div>
                            </div>
                            
                            <h3 class="text-lg font-semibold text-gray-900 mb-4" id="loading-title">
                                Generating Your Image
                            </h3>
                            
                            <!-- Progress Steps -->
                            <div class="space-y-4 mb-6">
                                <div id="step1" class="step flex items-center space-x-3 text-gray-500">
                                    <div class="step-indicator w-6 h-6 rounded-full border-2 border-gray-300 flex items-center justify-center">
                                        <svg class="checkmark hidden w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <div class="step-number">1</div>
                                    </div>
                                    <span class="step-text">Processing your prompt</span>
                                </div>
                                
                                <div id="step2" class="step flex items-center space-x-3 text-gray-500">
                                    <div class="step-indicator w-6 h-6 rounded-full border-2 border-gray-300 flex items-center justify-center">
                                        <svg class="checkmark hidden w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <div class="step-number">2</div>
                                    </div>
                                    <span class="step-text">Creating your masterpiece</span>
                                </div>
                                
                                <div id="step3" class="step flex items-center space-x-3 text-gray-500">
                                    <div class="step-indicator w-6 h-6 rounded-full border-2 border-gray-300 flex items-center justify-center">
                                        <svg class="checkmark hidden w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <div class="step-number">3</div>
                                    </div>
                                    <span class="step-text">Finalizing the details</span>
                                </div>
                            </div>
                            
                            <!-- Progress bar -->
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- History Section -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-lg font-semibold mb-4">Generation History</h2>
        <div id="history-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (history && history.length > 0) { %>
                <% history.forEach(item => { %>
                    <div class="history-item bg-gray-50 rounded-lg overflow-hidden" data-id="<%= item.id %>">
                        <img src="<%= item.image_url %>" 
                        alt="Generated image" 
                        class="w-full h-48 object-cover">
                        <div class="p-4">
                            <p class="text-sm text-gray-600 mb-2 line-clamp-2">
                                <%= item.prompt %>
                            </p>
                            <div class="flex justify-between items-center">
                                <span class="text-xs text-gray-500">
                                    <%= new Date(item.created_at).toLocaleString() %>
                                </span>
                                <div class="space-x-2">
                                    <button onclick="downloadHistoryImage('<%= item.image_url %>')"
                                            class="text-blue-600 hover:text-blue-800 text-sm">
                                        Download
                                    </button>
                                    <button onclick="deleteHistory('<%= item.id %>')"
                                            class="text-red-600 hover:text-red-800 text-sm">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-span-full text-gray-500 text-center py-4">
                    No generation history yet. Start creating some amazing images!
                </div>
            <% } %>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
let isGenerating = false;
let currentImageUrl = '';

const form = document.getElementById('generatorForm');
const result = document.getElementById('result');
const generatedImage = document.getElementById('generated-image');
const loadingOverlay = document.getElementById('loading-overlay');

function updateLoadingStep(step) {
    const steps = document.querySelectorAll('.step');
    const progressBar = document.getElementById('progress-bar');
    const progress = (step / (steps.length - 1)) * 100;
    
    steps.forEach((stepEl, index) => {
        if (index < step) {
            stepEl.classList.remove('active');
            stepEl.classList.add('complete');
        } else if (index === step) {
            stepEl.classList.add('active');
            stepEl.classList.remove('complete');
        } else {
            stepEl.classList.remove('active', 'complete');
        }
    });
    
    progressBar.style.width = `${progress}%`;
}

function showLoading() {
    const resultImage = document.getElementById('generated-image');
    resultImage.classList.add('hidden');
    loadingOverlay.classList.remove('hidden');
    result.classList.remove('hidden');
    updateLoadingStep(0);
}

function hideLoading() {
    loadingOverlay.classList.add('hidden');
    const resultImage = document.getElementById('generated-image');
    resultImage.classList.remove('hidden');
}

async function handleImageGeneration() {
    updateLoadingStep(0);
    await new Promise(r => setTimeout(r, 800));
    
    updateLoadingStep(1);
    await new Promise(r => setTimeout(r, 1000));
    
    updateLoadingStep(2);
}

form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (isGenerating) return;
    
    const formData = new FormData(form);
    const submitButton = form.querySelector('button[type="submit"]');
    const originalButtonText = submitButton.textContent;
    
    try {
        isGenerating = true;
        submitButton.disabled = true;
        submitButton.textContent = 'Generating...';
        showLoading();

        handleImageGeneration(); // Start progress animation

        const response = await fetch('/image-generator/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: formData.get('prompt'),
                size: formData.get('size')
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to generate image');
        }

        const data = await response.json();

        if (data.success) {
            currentImageUrl = data.imageUrl;
            await showResult(data.imageUrl);
            await refreshHistory();
            showNotification('Image generated successfully');
            form.reset();
        } else {
            throw new Error(data.error || 'Failed to generate image');
        }
    } catch (error) {
        console.error('Generation error:', error);
        showNotification(error.message || 'Failed to generate image', 'error');
    } finally {
        isGenerating = false;
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
        hideLoading();
    }
});

async function showResult(imageUrl) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
            result.classList.remove('hidden');
            generatedImage.src = imageUrl;
            result.scrollIntoView({ behavior: 'smooth' });
            resolve();
        };
        img.onerror = () => {
            reject(new Error('Failed to load image'));
        };
        img.src = imageUrl;
    });
}

async function downloadImage(url = currentImageUrl) {
    try {
        const link = document.createElement('a');
        link.href = url;
        link.download = `generated-image-${Date.now()}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Download error:', error);
        showNotification('Failed to download image', 'error');
    }
}

function downloadHistoryImage(url) {
    downloadImage(url);
}

async function deleteHistory(id) {
    const deleteButton = event.target;
    const originalText = deleteButton.textContent;
    
    if (!confirm('Are you sure you want to delete this image?')) return;

    try {
        deleteButton.textContent = 'Deleting...';
        deleteButton.disabled = true;

        const response = await fetch(`/image-generator/history/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            const element = document.querySelector(`[data-id="${id}"]`);
            element.style.opacity = '0';
            setTimeout(() => element.remove(), 300);
            showNotification('Image deleted successfully');
        } else {
            throw new Error('Failed to delete image');
        }
    } catch (error) {
        console.error('Delete error:', error);
        showNotification('Failed to delete image', 'error');
    } finally {
        deleteButton.textContent = originalText;
        deleteButton.disabled = false;
    }
}

async function refreshHistory() {
    try {
        const response = await fetch(window.location.href);
        const text = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const newHistory = doc.getElementById('history-list');
        
        if (newHistory) {
            const currentHistory = document.getElementById('history-list');
            currentHistory.innerHTML = newHistory.innerHTML;
        }
    } catch (error) {
        console.error('Error refreshing history:', error);
    }
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    } text-white`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => {
        notification.classList.add('opacity-0');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Handle escape key to close loading overlay
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !loadingOverlay.classList.contains('hidden')) {
        hideLoading();
    }
});

// Initialize tooltips and history event listeners
document.addEventListener('DOMContentLoaded', () => {
    // Add hover effects for buttons
    document.querySelectorAll('button').forEach(button => {
        button.addEventListener('mouseenter', () => {
            button.classList.add('transform', 'scale-105');
        });
        button.addEventListener('mouseleave', () => {
            button.classList.remove('transform', 'scale-105');
        });
    });

    // Add hover effects for history items
    document.querySelectorAll('.history-item').forEach(item => {
        item.addEventListener('mouseenter', () => {
            item.classList.add('transform', 'scale-102');
            item.classList.add('shadow-lg');
        });
        item.addEventListener('mouseleave', () => {
            item.classList.remove('transform', 'scale-102');
            item.classList.remove('shadow-lg');
        });
    });
});

// Handle window resize
let resizeTimeout;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        if (result.classList.contains('hidden')) return;
        result.scrollIntoView({ behavior: 'smooth' });
    }, 250);
});

// Handle network status
window.addEventListener('online', () => {
    showNotification('Connection restored', 'success');
});

window.addEventListener('offline', () => {
    showNotification('No internet connection', 'error');
});

// Prevent form submission when offline
window.addEventListener('submit', (e) => {
    if (!navigator.onLine) {
        e.preventDefault();
        showNotification('No internet connection. Please try again when online.', 'error');
    }
});
</script>