<%- contentFor('style') %>
<style>
.dropzone {
    border: 2px dashed #3B82F6;
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    transition: all 0.3s ease;
    cursor: pointer;
}

.dropzone.dragover {
    background-color: #EFF6FF;
    border-color: #2563EB;
}

.transcription-container {
    white-space: pre-wrap;
    line-height: 1.6;
}

.history-item {
    transition: all 0.2s ease;
}

.history-item:hover {
    transform: translateY(-2px);
}

#progress-bar {
    transition: width 0.3s ease;
}
</style>

<%- contentFor('body') %>
<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-900">Audio Transcribe</h1>
        <p class="text-gray-600 mt-2">Upload your MP3 file (max 30 minutes) to get the transcription</p>
    </div>

    <!-- Upload Section -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <form id="uploadForm" class="space-y-4">
            <div id="dropzone" class="dropzone">
                <input type="file" 
                id="audioFile" 
                name="audio" 
                accept="audio/*, video/mp4, video/webm" 
                class="hidden">
                <div id="dropzone-default" class="space-y-2">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                    </svg>
                    <div class="text-gray-600">
                        Drag and drop your MP3 file here, or click to select
                    </div>
                    <div class="text-sm text-gray-500">
                        Maximum file size: 25MB
                        <br>
                        Allowed formats: mp3, mp4, mpeg, mpga, m4a, wav, and webm
                    </div>
                </div>
                
                <!-- Selected File State -->
                <div id="dropzone-file" class="hidden space-y-2">
                    <div class="flex items-center justify-center space-x-2">
                        <svg class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                  d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"/>
                        </svg>
                        <span id="selected-filename" class="text-blue-600 font-medium"></span>
                    </div>
                    <button type="button" 
                            onclick="clearSelectedFile()" 
                            class="text-sm text-red-600 hover:text-red-800 transition-colors">
                        Remove file
                    </button>
                </div>
            </div>

            <!-- Progress Bar -->
            <div id="progress-container" class="hidden">
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full w-0"></div>
                </div>
                <div id="progress-text" class="text-sm text-gray-600 mt-1 text-center"></div>
            </div>

            <button type="submit" 
                    class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                Transcribe Audio
            </button>
        </form>
    </div>

    <!-- Result Section -->
    <div id="result" class="hidden bg-white rounded-lg shadow-lg p-6 mb-8">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Transcription Result</h2>
            <button onclick="copyTranscription()" 
                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                Copy Text
            </button>
        </div>
        <div id="transcription-text" class="transcription-container bg-gray-50 p-4 rounded-lg"></div>
    </div>

    <!-- History Section -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-lg font-semibold mb-4">Transcription History</h2>
        <div id="history-list" class="space-y-4">
            <% if (history && history.length > 0) { %>
                <% history.forEach(item => { %>
                    <div class="history-item bg-gray-50 p-4 rounded-lg" data-id="<%= item.id %>">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <div class="font-medium"><%= item.filename %></div>
                                <div class="text-sm text-gray-500">
                                    <%= new Date(item.created_at).toLocaleString() %>
                                </div>
                                <div class="mt-2 text-sm text-gray-600 truncate">
                                    <%= item.transcription.substring(0, 100) %>...
                                </div>
                            </div>
                            <div class="flex space-x-2 ml-4">
                                <button onclick="viewTranscription(`<%- encodeURIComponent(item.transcription) %>`)"
                                        class="text-blue-600 hover:text-blue-800 transition-colors">
                                    View
                                </button>
                                <button onclick="deleteHistory('<%= item.id %>')"
                                        class="text-red-600 hover:text-red-800 transition-colors">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="text-gray-500 text-center py-4">No transcription history yet</div>
            <% } %>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
const dropzone = document.getElementById('dropzone');
const audioFile = document.getElementById('audioFile');
const uploadForm = document.getElementById('uploadForm');
const progressContainer = document.getElementById('progress-container');
const progressBar = document.getElementById('progress-bar');
const progressText = document.getElementById('progress-text');

function validateFile(file) {
    // Check file type
    const allowedTypes = [
        'audio/mpeg',      // mp3, mpga
        'audio/mp4',       // m4a
        'video/mp4',       // mp4
        'audio/wav',       // wav
        'audio/webm',      // webm audio
        'video/webm',      // webm video
    ];

    if (!allowedTypes.includes(file.type)) {
        showNotification('Invalid file type. Allowed formats: mp3, mp4, mpeg, mpga, m4a, wav, and webm', 'error');
        return false;
    }

    // Check file size (25MB)
    const maxSize = 25 * 1024 * 1024; // 25MB in bytes
    if (file.size > maxSize) {
        showNotification('File size exceeds 25MB limit', 'error');
        return false;
    }

    return true;
}

function updateDropzoneUI(file) {
    const defaultState = document.getElementById('dropzone-default');
    const fileState = document.getElementById('dropzone-file');
    const filenameElement = document.getElementById('selected-filename');
    
    if (file) {
        defaultState.classList.add('hidden');
        fileState.classList.remove('hidden');
        const size = (file.size / (1024 * 1024)).toFixed(2);
        filenameElement.textContent = `${file.name} (${size} MB)`;
    } else {
        defaultState.classList.remove('hidden');
        fileState.classList.add('hidden');
        filenameElement.textContent = '';
    }
}

function clearSelectedFile() {
    audioFile.value = '';
    updateDropzoneUI(null);
}

// File Input Handling
audioFile.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
        if (validateFile(file)) {
            updateDropzoneUI(file);
        } else {
            clearSelectedFile();
        }
    }
});
// Drag and Drop Handling
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropzone.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
    dropzone.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
    dropzone.addEventListener(eventName, unhighlight, false);
});

function highlight(e) {
    dropzone.classList.add('dragover');
}

function unhighlight(e) {
    dropzone.classList.remove('dragover');
}

dropzone.addEventListener('drop', handleDrop, false);
dropzone.addEventListener('click', () => audioFile.click());

function handleDrop(e) {
    const dt = e.dataTransfer;
    const file = dt.files[0];

    if (file) {
        if (validateFile(file)) {
            audioFile.files = dt.files;
            updateDropzoneUI(file);
        }
    }
}

// Form Submission
uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const file = audioFile.files[0];
    
    if (!file) {
        showNotification('Please select an audio file', 'error');
        return;
    }

    if (!validateFile(file)) {
        return;
    }
    const formData = new FormData();
    formData.append('audio', file);

    try {
        progressContainer.classList.remove('hidden');
        progressBar.style.width = '0%';
        progressText.textContent = 'Processing...';

        const response = await fetch('/transcribe/upload', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showResult(data.transcription);
            await refreshHistory();
            showNotification('Transcription completed successfully');
            
            // Reset form and UI
            uploadForm.reset();
            clearSelectedFile();
            progressContainer.classList.add('hidden');
            progressBar.style.width = '0%';
            progressText.textContent = '';
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Upload error:', error);
        showNotification(error.message || 'Failed to transcribe audio', 'error');
    } finally {
        progressContainer.classList.add('hidden');
    }
});

function showResult(text) {
    const resultDiv = document.getElementById('result');
    const transcriptionText = document.getElementById('transcription-text');
    
    const formattedText = text.split('\n\n').map(paragraph => 
        `<p class="mb-4">${paragraph}</p>`
    ).join('');
    
    resultDiv.classList.remove('hidden');
    transcriptionText.innerHTML = formattedText;
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

function viewTranscription(text) {
    if (!text) {
        showNotification('No transcription content available', 'error');
        return;
    }

    try {
        const decodedUri = decodeURIComponent(text);
        const decodedText = decodedUri.replace(/&quot;/g, '"')
                                    .replace(/&#39;/g, "'")
                                    .replace(/&lt;/g, '<')
                                    .replace(/&gt;/g, '>')
                                    .replace(/&amp;/g, '&');
        
        showResult(decodedText);
        window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
        console.error('Error viewing transcription:', error);
        showNotification('Failed to display transcription', 'error');
    }
}

async function deleteHistory(id) {
    if (!confirm('Are you sure you want to delete this transcription?')) return;

    try {
        const response = await fetch(`/transcribe/history/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            document.querySelector(`[data-id="${id}"]`).remove();
            showNotification('History deleted successfully');
        } else {
            throw new Error('Failed to delete history');
        }
    } catch (error) {
        console.error('Delete error:', error);
        showNotification('Failed to delete history', 'error');
    }
}

async function refreshHistory() {
    try {
        const response = await fetch(window.location.href);
        const text = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const newHistory = doc.getElementById('history-list');
        
        if (newHistory) {
            const currentHistory = document.getElementById('history-list');
            currentHistory.innerHTML = newHistory.innerHTML;
        }
    } catch (error) {
        console.error('Error refreshing history:', error);
    }
}

async function copyTranscription() {
    const text = document.getElementById('transcription-text').innerText;
    try {
        await navigator.clipboard.writeText(text);
        showNotification('Text copied to clipboard');
    } catch (error) {
        console.error('Copy failed:', error);
        showNotification('Failed to copy text', 'error');
    }
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    } text-white`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}
</script>