<!-- views/partials/sidebar.ejs -->
<div class="sidebar-container h-screen flex-shrink-0 hidden md:block md:w-80 bg-white border-r border-gray-200">
    <div class="h-full flex flex-col">
        <!-- New Chat Button -->
        <div class="p-4 border-b border-gray-200">
            <button onclick="startNewConversation()" 
                    class="w-full flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                New Chat
            </button>
        </div>

        <!-- Conversations List -->
        <div class="flex-1 overflow-y-auto">
            <div class="px-4 py-3 border-b border-gray-200">
                <h2 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Recent Conversations</h2>
            </div>
            <div id="conversations-list" class="divide-y divide-gray-200">
                <!-- Conversations will be dynamically inserted here -->
            </div>
        </div>

        <!-- User Settings -->
        <div class="border-t border-gray-200 p-4">
            <div class="flex items-center">
                <% if (locals.user) { %>
                    <div class="flex-shrink-0">
                        <div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
                            <span class="text-white font-medium">
                                <%= user.username.charAt(0).toUpperCase() %>
                            </span>
                        </div>
                    </div>
                    <div class="ml-3 min-w-0 flex-1">
                        <div class="text-sm font-medium text-gray-900 truncate">
                            <%= user.username %>
                        </div>
                        <div class="text-sm text-gray-500 truncate">
                            <%= user.email %>
                        </div>
                    </div>
                    <div class="ml-3 flex-shrink-0">
                        <button onclick="toggleUserSettings()" 
                                class="inline-flex items-center p-1 border border-transparent rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                        </button>
                    </div>
                <% } %>
            </div>

            <!-- Settings Dropdown -->
            <div id="user-settings-dropdown" class="hidden mt-2 py-1 bg-white rounded-md shadow-lg">
                <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    Profile Settings
                </a>
                <% if (user && user.role === 'admin') { %>
                    <a href="/admin/dashboard" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        Admin Dashboard
                    </a>
                <% } %>
                <a href="/logout" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                    Sign out
                </a>
            </div>
        </div>
    </div>
</div>

<script>
// Template for rendering conversation items
function renderConversation(conversation) {
    const date = new Date(conversation.CreatedAt * 1000).toLocaleDateString();
    return `
        <div class="conversation-item hover:bg-gray-50 cursor-pointer" 
             onclick="loadConversation('${conversation.ConversationId}')"
             data-id="${conversation.ConversationId}">
            <div class="px-4 py-3">
                <div class="flex items-center justify-between">
                    <div class="min-w-0 flex-1">
                        <p class="text-sm font-medium text-gray-900 truncate">
                            ${conversation.Summary || 'New Conversation'}
                        </p>
                        <p class="text-sm text-gray-500">
                            ${date}
                        </p>
                    </div>
                    <div class="ml-3 flex-shrink-0">
                        <button onclick="deleteConversation('${conversation.ConversationId}', event)" 
                                class="text-gray-400 hover:text-red-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Toggle user settings dropdown
function toggleUserSettings() {
    const dropdown = document.getElementById('user-settings-dropdown');
    dropdown.classList.toggle('hidden');
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const isClickInside = event.target.closest('.user-settings');
        if (!isClickInside && !dropdown.classList.contains('hidden')) {
            dropdown.classList.add('hidden');
        }
    });
}

// Update active conversation highlighting
function updateActiveConversation(conversationId) {
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('bg-blue-50');
        if (item.dataset.id === conversationId) {
            item.classList.add('bg-blue-50');
        }
    });
}

// Delete conversation handler
async function deleteConversation(conversationId, event) {
    event.stopPropagation();
    if (!confirm('Are you sure you want to delete this conversation?')) return;
    
    try {
        await fetch(`/chat/conversation/${conversationId}`, {
            method: 'DELETE'
        });
        loadConversations();
        if (currentConversationId === conversationId) {
            startNewConversation();
        }
    } catch (error) {
        console.error('Error deleting conversation:', error);
        showError('Failed to delete conversation');
    }
}

// Load conversations into sidebar
async function loadConversations() {
    try {
        const response = await fetch('/chat/conversations');
        const data = await response.json();
        const conversationsList = document.getElementById('conversations-list');
        
        conversationsList.innerHTML = data.result
            .map(conv => renderConversation(conv))
            .join('');
            
        updateActiveConversation(currentConversationId);
    } catch (error) {
        console.error('Error loading conversations:', error);
        showError('Failed to load conversations');
    }
}

// Initialize sidebar
document.addEventListener('DOMContentLoaded', () => {
    loadConversations();
});
</script>